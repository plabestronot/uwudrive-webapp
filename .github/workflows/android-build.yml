name: 'Build Tauri Android App'

on:
  push:
    branches:
      - master # Adjust this to your release branch, e.g., main, master

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest # ubuntu-22.04 is also a good choice
    permissions:
      contents: write # Required to create a GitHub Release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/* # Or your specific Node.js version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest # Or your specific pnpm version

      - name: Install Rust stable with Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Or another distribution like 'zulu'
          java-version: '17' # Matches your setup-tauri.sh

      - name: Setup Android SDK and NDK
        uses: reactivecircus/setup-android-sdk@v2 # Using v2 as it's well-established
        with:
          platforms: 'android-34'        # Corresponds to "platforms;android-34"
          build-tools: '34.0.0'          # Corresponds to "build-tools;34.0.0"
          ndk: '26.1.10909125'           # Corresponds to "ndk;26.1.10909125"
          # cmdline-tools: 'latest' # The action usually installs a recent version. Your script used 13114758.
                                    # If specific cmdline-tools are needed and this doesn't work, this might need adjustment.
                                    # This action automatically accepts SDK licenses.

      - name: Configure Android Signing
        # This step decodes the keystore and creates the keystore.properties file.
        # Assumes your build.gradle.kts is configured to read 'src-tauri/gen/android/keystore.properties'.
        # Your keystore file (upload-keystore.jks) will be placed at 'src-tauri/gen/android/app/upload-keystore.jks'.
        # The keystore.properties file will be created at 'src-tauri/gen/android/keystore.properties'.
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "Ensuring target directory for keystore exists..."
          mkdir -p src-tauri/gen/android/app
          
          echo "Decoding Android keystore..."
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > src-tauri/gen/android/app/upload-keystore.jks
          echo "Keystore placed at src-tauri/gen/android/app/upload-keystore.jks"

          echo "Creating keystore.properties at src-tauri/gen/android/keystore.properties..."
          # The storeFile path is relative to the keystore.properties file itself.
          echo "storeFile=app/upload-keystore.jks" > src-tauri/gen/android/keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> src-tauri/gen/android/keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> src-tauri/gen/android/keystore.properties
          echo "keyPassword=${{ secrets.KEY_ALIAS_PASSWORD }}" >> src-tauri/gen/android/keystore.properties
          echo "keystore.properties created successfully."

      - name: Build Android APK
        # This command builds the APK(s) as configured in your tauri.conf.json (for specific architectures)
        # and uses the signing configuration from build.gradle.kts / tauri.conf.json.
        # Gradle should primarily use the keystore.properties file created in the previous step.
        run: pnpm tauri android build --apk
        env:
          # These environment variables can be used by Tauri to influence the build,
          # but primary signing configuration should come from keystore.properties read by Gradle.
          TAURI_KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }} # Corresponds to storePassword for broader use by Tauri if needed
          TAURI_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          TAURI_KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }} # Corresponds to keyPassword

      - name: List generated APKs (for debugging)
        if: always() # Run this step even if the build fails, to help debug paths
        run: |
          echo "Searching for APKs in src-tauri/gen/android/ and src-tauri/target/"
          find src-tauri/gen/android/ -name "*.apk" -ls || echo "No APKs found in src-tauri/gen/android/"
          find src-tauri/target/ -name "*.apk" -ls || echo "No APKs found in src-tauri/target/"
          echo "Expected APK path for tauri-action (example): src-tauri/gen/android/app/app/build/outputs/apk/release/app-release.apk"

      - name: Publish to GitHub Release with Tauri Action
        uses: tauri-apps/tauri-action@v0 # Using v0 as per official Tauri examples
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Signing variables are not directly used by tauri-action for publishing,
          # but GITHUB_TOKEN is essential.
        with:
          tagName: android-v__VERSION__ # __VERSION__ is replaced by the app version from tauri.conf.json
          releaseName: 'Android App v__VERSION__'
          releaseBody: 'Android APK for v__VERSION__.'
          releaseDraft: true # Set to false to publish immediately
          prerelease: false
          # The 'include' glob pattern tells tauri-action where to find the APKs.
          # This pattern searches recursively within src-tauri/gen/android/ for release APKs.
          # Adjust if your product name isn't 'app' or if paths differ.
          # Example: src-tauri/gen/android/myCoolApp/app/build/outputs/apk/release/*.apk
          # The `**/` should handle the variable product name directory.
          include: 'src-tauri/gen/android/**/app/build/outputs/apk/release/*.apk'
          # If AABs are built (`--aab` flag instead of `--apk`), the include path would be:
          # include: 'src-tauri/gen/android/**/app/build/outputs/bundle/release/*.aab'
