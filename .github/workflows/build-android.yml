name: Android Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "21"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # You can specify your desired pnpm version
          run_install: false # We'll run install in the next step

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Build Folder
        run: pnpm run build

      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then pnpm exec cap add android; fi

      - name: Capacitor update
        run: pnpm exec cap update

      - name: Capacitor copy
        run: pnpm exec cap copy

      - name: Generate icons and splash screen to android folder
        run: |
          if [ -d "./resources" ]; then 
            pnpm add -D @capacitor/assets
            pnpm exec capacitor-assets generate --android
          fi

      - name: Build app bundle
        run: cd android && ./gradlew bundle && ./gradlew assembleDebug

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      - name: Check folder content of android output
        run: ls ./android/app/build/outputs/bundle/release

      - name: Install Hub CLI
        run: |
          HUB_VERSION="2.14.2"
          HUB_URL="https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz"
          curl -sSL $HUB_URL | tar -xz
          sudo mv ./hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin/
          hub --version

      - name: Build Release
        shell: bash
        run: |
          hub release create latest \
          -m "latest" \
          -a ./android/app/build/outputs/bundle/release/app-release-signed.aab \
          -a ./android/app/build/outputs/apk/debug/app-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
